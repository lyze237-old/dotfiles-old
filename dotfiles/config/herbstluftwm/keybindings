#!/usr/bin/env bash
hc keyunbind --all

hc keybind "$Mod-Shift-r" reload
hc keybind "$Mod-Shift-q" close

# Wm Specific {{{
# basic movement
# focusing clients
hc keybind "$Mod-h"       or / focus left / focus_monitor -1
hc keybind "$Mod-j"       or / focus down / focus_monitor -d
hc keybind "$Mod-k"       or / focus up / focus_monitor -u
hc keybind "$Mod-l"       or / focus right / focus_monitor +1

# moving clients
hc keybind "$Mod-Shift-h" or / shift left / chain , lock , shift_to_monitor -1 , focus_monitor -1 , unlock
hc keybind "$Mod-Shift-j" or / shift down / chain , lock , shift_to_monitor -d , focus_monitor -d , unlock
hc keybind "$Mod-Shift-k" or / shift up / chain , lock , shift_to_monitor -u , focus_monitor -u , unlock
hc keybind "$Mod-Shift-l" or / shift right / chain , lock , shift_to_monitor +1 , focus_monitor +1 , unlock

# splitting frames
splitstep=0.5
# create an empty frame at the specified direction
hc keybind "$Mod-Alt-h"       split   left $splitstep
hc keybind "$Mod-Alt-j"       split   bottom $splitstep
hc keybind "$Mod-Alt-k"       split   top $splitstep
hc keybind "$Mod-Alt-l"       split   right $splitstep

# resizing frames
resizestep=0.05
hc keybind "$Mod-Control-h"       resize left +$resizestep
hc keybind "$Mod-Control-j"       resize down +$resizestep
hc keybind "$Mod-Control-k"       resize up +$resizestep
hc keybind "$Mod-Control-l"       resize right +$resizestep

# focus
hc keybind "$Mod-BackSpace"   cycle_monitor
hc keybind "$Mod-Tab"         cycle_all +1
hc keybind "$Mod-Shift-Tab"   cycle_all -1
hc keybind "$Mod-c" cycle
hc keybind "$Mod-i" jumpto urgent

# cycle through tags
hc keybind "$Mod-period" or , substitute NEXT tags.focus.my_next_tag use NEXT  \
                          , use_index +1 --skip-visible
hc keybind "$Mod-comma"  or , substitute PREV tags.focus.my_previous_tag use PREV  \
                          , use_index +1 --skip-visible

# layouting
hc keybind "$Mod-r" remove
hc keybind "$Mod-s" floating toggle
hc keybind "$Mod-f" fullscreen toggle
hc keybind "$Mod-p" pseudotile toggle
# The following cycles through the available layouts within a frame, but skips
# layouts, if the layout change wouldn't affect the actual window positions.
# I.e. if there are two windows within a frame, the grid layout is skipped.
hc keybind "$Mod-space"                                                           \
            or , and . compare tags.focus.curframe_wcount = 2                   \
                     . cycle_layout +1 vertical horizontal max vertical grid    \
               , cycle_layout +1

# tags
# implement proper tags
monitorCount=$(getMonitorCount)

for (( monitorIndex=0; monitorIndex<monitorCount; monitorIndex++ )) ; do
    for key in ${tagKeys[@]} ; do
        hc chain , keybind "$Mod-$key" sprintf MONITOR "%s_$key" tags.focus.my_monitor use MONITOR \
                 , keybind "$Mod-Shift-$key" sprintf MONITOR "%s_$key" tags.focus.my_monitor move MONITOR
    done
done
# }}}

# Program Specific {{{
# Sound
hc keybind XF86AudioLowerVolume spawn pactl set-sink-volume @DEFAULT_SINK@ -5%
hc keybind XF86AudioRaiseVolume spawn pactl set-sink-volume @DEFAULT_SINK@ +5%
hc keybind XF86AudioMute spawn pactl set-sink-mute @DEFAULT_SINK@ toggle
hc keybind Pause spawn python ~/.config/owl/scripts/defaultSink.py

# Music 
hc keybind XF86AudioPlay spawn playerctl play-pause
hc keybind XF86AudioNext spawn playerctl next
hc keybind XF86AudioPrev spawn playerctl previous

# Rofi
hc keybind "$Mod-d" spawn rofi -show drun
hc keybind "$Mod-Shift-d" spawn rofi -show run
hc keybind "$Mod-p" spawn rofi-pass
hc keybind Alt+Pause spawn bash -c "$HOME/.config/herbstluftwm/rofi/power.sh"

# Defaults
hc keybind "$Mod-e" spawn exo-open --launch FileManager
hc keybind "$Mod-Return" spawn "$terminal"

# Screenshot
hc keybind Print spawn nougat -t -f -c -b maim 
hc keybind Ctrl-Print spawn nougat -t -c -b maim
# }}}
