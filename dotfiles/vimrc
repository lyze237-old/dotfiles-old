" Generic {{{
set shell=sh
syntax on
set cursorline
set showcmd
set wildmenu
set showmatch  "highlights brackets
" }}}

" Searching {{{
set incsearch " search as characters are entered
set hlsearch  "highlight matches
" }}}

" Tab stuff, spaces instead of tabs {{{
set tabstop=4
set softtabstop=4
set expandtab
" }}}

" Folding {{{
set foldenable
set foldlevelstart=0
set foldnestmax=10
nnoremap <space> za
set foldmethod=marker
set modelines=1
" }}}

" Allows you to save the file with sudo if you don't have access rights  {{{
cnoremap w!! w !sudo tee > /dev/null %
" }}}

" ctrl+hjkl to move between splits {{{
function! WinMove(key)
    let t:curwin = winnr()
    exec "wincmd ".a:key
    if (t:curwin == winnr())
        if (match(a:key,'[jk]'))
            wincmd v
        else
            wincmd s
        endif
        exec "wincmd ".a:key
    endif
endfunction

map <C-j> :call WinMove('j')<cr>
map <C-k> :call WinMove('k')<cr>
map <C-h> :call WinMove('h')<cr>
map <C-l> :call WinMove('l')<cr>
set splitbelow
set splitright
" }}}

" Set line numbers {{{
nmap <silent> <leader>ln :exec &nu==&rnu? "se nu!" : "se rnu!"<cr>
set nu
set relativenumber
" }}}

" Toggle Slashes {{{
function! ToggleSlash(independent) range
  let from = ''
  for lnum in range(a:firstline, a:lastline)
    let line = getline(lnum)
    let first = matchstr(line, '[/\\]')
    if !empty(first)
      if a:independent || empty(from)
        let from = first
      endif
      let opposite = (from == '/' ? '\' : '/')
      call setline(lnum, substitute(line, from, opposite, 'g'))
    endif
  endfor
endfunction
command! -bang -range ToggleSlash <line1>,<line2>call ToggleSlash(<bang>1)
noremap <Leader>/ :ToggleSlash<CR>
" }}}

" vim:foldmethod=marker:foldlevel=0

